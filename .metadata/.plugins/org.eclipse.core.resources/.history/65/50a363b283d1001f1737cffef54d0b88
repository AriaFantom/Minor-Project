package com.healthify.controller;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.Base64;
import com.healthify.dao.InvitationDao;
import com.healthify.dao.InvitationDaoImpl;
import com.healthify.dao.Invitation;


@WebServlet("/InviteDoctor")
public class InviteDoctor extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static InvitationDao inviteDao = new InvitationDaoImpl();
    private final String SMTP_HOST = "smtp.resend.com";
    private final String SMTP_PORT = "465";
    private final String SMTP_USER = "onboarding@resend.dev";
    private final String SMTP_PASSWORD = "re_SWsGSg1p_6REP9wDAfhmJ5pUZftocFnP3";
       
 
    public InviteDoctor() {
        super();
    }


	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		response.getWriter().append("Served at: ").append(request.getContextPath());
	}


	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		 String doctorEmail = request.getParameter("doctor_email");

	        if (doctorEmail == null || doctorEmail.isEmpty()) {
	        	response.sendRedirect("dashboard/admin/invite.jsp?error=noEmail");
	        }
	        
	        String token = generateToken(); // Implement this method
	        LocalDateTime expiry = LocalDateTime.now().plusHours(24);
	        Invitation invite = new Invitation();
	        invite.setDoctorEmail(doctorEmail);
	        invite.setInviteToken(token);
	        invite.setTokenExpiry(expiry);
	        invite.setUsed(false);
	        
	        inviteDao.sendInvite(invite);
	        
	      
	}
	
	 private String generateToken() {
	        SecureRandom random = new SecureRandom();
	        byte[] bytes = new byte[24];
	        random.nextBytes(bytes);
	        return Base64.getUrlEncoder().withoutPadding().encodeToString(bytes);
	}

}
